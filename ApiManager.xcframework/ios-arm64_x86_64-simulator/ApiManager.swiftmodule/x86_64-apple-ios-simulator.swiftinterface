// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ApiManager
import Combine
import Foundation
import Swift
import _Concurrency
public class APIClientBasic : ApiManager.APIClientProtocol {
  public var urlSession: Foundation.URLSession
  public init()
  public func send<T>(_ request: T) -> Combine.AnyPublisher<T.Response, Swift.Error> where T : ApiManager.APIRequestProtocol
  @objc deinit
}
public protocol APIClientProtocol {
  var urlSession: Foundation.URLSession { get }
  func send<T>(_ request: T) -> Combine.AnyPublisher<T.Response, Swift.Error> where T : ApiManager.APIRequestProtocol
}
extension ApiManager.APIClientProtocol {
  public func make(urlRequest: Foundation.URLRequest) -> Combine.AnyPublisher<Foundation.Data, Swift.Error>
}
public class APIClientSecurized : ApiManager.APIClientProtocol {
  final public let urlSession: Foundation.URLSession
  public init(jwt: ApiManager.JWTProtocol, secureDatabaseUseCase: ApiManager.SecureDatabaseUseCaseProtocol, refreshTokenUseCase: ApiManager.RefreshTokenUseCaseProtocol, logoutService: ApiManager.ApiLogoutServiceProtocol, deprecatedService: ApiManager.ApiDeprecatedServiceProtocol)
  public func send<T>(_ request: T) -> Combine.AnyPublisher<T.Response, Swift.Error> where T : ApiManager.APIRequestProtocol
  @objc deinit
}
public protocol ApiDeprecatedServiceProtocol {
  func toDeprecationNotice()
}
public protocol ApiLogoutServiceProtocol {
  func logout()
}
public protocol RefreshTokenUseCaseProtocol {
  func execute(refreshToken: Swift.String) -> Combine.AnyPublisher<ApiManager.Token, Swift.Error>
}
public protocol SecureDatabaseUseCaseProtocol {
  func getToken() -> Combine.AnyPublisher<ApiManager.Token, Swift.Error>
  func saveToken(token: ApiManager.Token) -> Combine.AnyPublisher<Swift.Bool, Swift.Error>
  func removeToken() -> Combine.AnyPublisher<Swift.Bool, Swift.Error>
  func saveLoginData(username: Swift.String, password: Swift.String) -> Combine.AnyPublisher<Swift.Bool, Swift.Error>
  func getUsername() -> Combine.AnyPublisher<Swift.String, Swift.Error>
  func getPassword() -> Combine.AnyPublisher<Swift.String, Swift.Error>
  func removeLoginData() -> Combine.AnyPublisher<Swift.Bool, Swift.Error>
  func removeAllData() -> Combine.AnyPublisher<Swift.Bool, Swift.Error>
}
public struct Token {
  public var tokenType: Swift.String
  public var accessToken: Swift.String
  public var refreshToken: Swift.String
  public var expiresIn: Swift.Double
  public init(tokenType: Swift.String, accessToken: Swift.String, refreshToken: Swift.String = "", expiresIn: Swift.Double)
}
extension ApiManager.Token : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension ApiManager.Token : Swift.Equatable {
  public static func == (lhs: ApiManager.Token, rhs: ApiManager.Token) -> Swift.Bool
}
public struct ApplicationJSONBody : ApiManager.HTTPBodyProtocol {
  public func create(paramsDictionary: [Swift.String : Any]) -> Foundation.Data
  public init()
}
public protocol HTTPBodyProtocol {
  func create(paramsDictionary: [Swift.String : Any]) -> Foundation.Data
}
public struct MFormDataBody : ApiManager.HTTPBodyProtocol {
  public init(boundary: Swift.String)
  public func create(paramsDictionary: [Swift.String : Any]) -> Foundation.Data
}
public enum HTTPErrorType : Swift.Error, Swift.Equatable {
  case deprecated
  case generic
  case unauthorized
  case noContent
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ApiManager.HTTPErrorType, b: ApiManager.HTTPErrorType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct ApplicationJSONHeader : ApiManager.HTTPHeaderProtocol {
  public var standardHeaders: [ApiManager.RequestHeaderType : Swift.String] {
    get
  }
  public var headers: [ApiManager.RequestHeaderType : Swift.String] {
    get
  }
  public init(customHeaders: [ApiManager.RequestHeaderType : Swift.String] = [:])
}
public protocol HTTPHeaderProtocol {
  var headers: [ApiManager.RequestHeaderType : Swift.String] { get }
  var standardHeaders: [ApiManager.RequestHeaderType : Swift.String] { get }
}
public enum RequestHeaderType : Swift.String {
  case ContentType
  case Authorization
  case AppScope
  case AppScopeVersion
  case OnboardingSessionId
  case CorrelationId
  case UserAgent
  case ApiVersion
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct MFormDataHeader : ApiManager.HTTPHeaderProtocol {
  public var standardHeaders: [ApiManager.RequestHeaderType : Swift.String] {
    get
  }
  public var headers: [ApiManager.RequestHeaderType : Swift.String] {
    get
  }
  public init(customHeaders: [ApiManager.RequestHeaderType : Swift.String] = [:], boundary: Swift.String)
}
public struct GetMethod : ApiManager.HTTPMethodProtocol {
  public var method: Swift.String {
    get
  }
  public init(requestHeaders: ApiManager.HTTPHeaderProtocol)
  public func setURLRequest(urlRequest: Foundation.URLRequest, paramsDictionary: [Swift.String : Any]) -> Foundation.URLRequest
}
public protocol HTTPMethodProtocol {
  var method: Swift.String { get }
  func setURLRequest(urlRequest: Foundation.URLRequest, paramsDictionary: [Swift.String : Any]) -> Foundation.URLRequest
}
public struct PostMethod : ApiManager.HTTPMethodProtocol {
  public var method: Swift.String {
    get
  }
  public init(requestHeaders: ApiManager.HTTPHeaderProtocol, requestBody: ApiManager.HTTPBodyProtocol)
  public func setURLRequest(urlRequest: Foundation.URLRequest, paramsDictionary: [Swift.String : Any]) -> Foundation.URLRequest
}
public struct PutMethod : ApiManager.HTTPMethodProtocol {
  public var method: Swift.String {
    get
  }
  public init(requestHeaders: ApiManager.HTTPHeaderProtocol, requestBody: ApiManager.HTTPBodyProtocol)
  public func setURLRequest(urlRequest: Foundation.URLRequest, paramsDictionary: [Swift.String : Any]) -> Foundation.URLRequest
}
public protocol APIRequestProtocol {
  associatedtype Response : Swift.Decodable
  var baseURL: Foundation.URL { get }
  var method: ApiManager.HTTPMethodProtocol { get }
  func convertPropertiesToBody() -> [Swift.String : Any]
}
public protocol JWTProtocol {
  func checkIsValidToken(accessToken: Swift.String) -> Swift.Bool
}
extension ApiManager.HTTPErrorType : Swift.Hashable {}
extension ApiManager.RequestHeaderType : Swift.Equatable {}
extension ApiManager.RequestHeaderType : Swift.Hashable {}
extension ApiManager.RequestHeaderType : Swift.RawRepresentable {}
